# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны
# быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()),
# деление (truediv()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class OrganicCells:

    def __init__(self, unit: int):
        self.unit = unit

    def __add__(self, other):
        '''
        Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
        клеток.
        :param other: экземпляр класса OrganicCells
        :return: экземпляр класса OrganicCells
        '''
        return OrganicCells(self.unit + other.unit)

    def __sub__(self, other):
        '''
        Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
        больше нуля, иначе выводить соответствующее сообщение.
        :param other: экземпляр класса OrganicCells
        :return: экземпляр класса OrganicCells
        '''
        if self.unit - other.unit > 0:
            return OrganicCells(self.unit - other.unit)
        else:
            print(f"разность количества ячеек двух клеток меньше нуля")
            return None

    def __mul__(self, other):
        '''
        Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
        ячеек этих двух клеток.
        :param other: экземпляр класса OrganicCells
        :return: экземпляр класса OrganicCells
        '''
        return OrganicCells(self.unit * other.unit)

    def __truediv__(self, other):
        '''
        Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
        количества ячеек этих двух клеток.
        :param other: экземпляр класса OrganicCells
        :return: экземпляр класса OrganicCells
        '''
        return OrganicCells(round(self.unit // other.unit))

    def make_order(self, row_quantity):
        '''
        Организует ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
        Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
        Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
        Тогда метод make_order() вернет строку: *****\n*****\n**.
        Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
        Тогда метод make_order() вернет строку: *****\n*****\n*****.
        :param row_quantity: количество ячеек в ряду
        :return: строка вида *****\n*****\n*****...
        '''

        row = ''
        for i in range(int(self.unit / row_quantity)):
            row += f'{"*" * row_quantity} \n'
        row += f'{"*" * (self.unit % row_quantity)}'
        return row

    def __str__(self):
        return f'{self.unit}'


cell1 = OrganicCells(14)
cell2 = OrganicCells(5)

print(cell1 + cell2)
print(cell1 - cell2)
print(cell2 - cell1)
print(cell1 * cell2)
print(cell1 / cell2)
print(cell1.make_order(5))
